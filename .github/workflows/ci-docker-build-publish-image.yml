name: Build/publish Docker image

on:
  workflow_call:
    inputs:
      image-name:
        description: Name of Docker image
        required: false
        type: string

      image-pack:
        description: Docker image pack of builder-jammy-tiny, builder-jammy-base or builder-jammy-full
        default: builder-jammy-tiny
        required: false
        type: string

      container-scan-offline-mode:
        description: Container-scan is default download updated CVE definitions via Trivy, enable offline on download problems
        default: false
        type: boolean

      slack-channel-id:
        description: Team channel id
        default: ""
        required: false
        type: string

    outputs:
      image-version:
        description: "Docker image version"
        value: ${{ jobs.build-publish-image.outputs.imagetag }}

      image-digest:
        description: "Docker image SHA256 digest"
        value: ${{ jobs.build-publish-image.outputs.imagedigest }}
jobs:
  build-publish-image:
    runs-on: ubuntu-latest
    env:
      REPOSITORY-NAME: ${{ github.event.repository.name }}
      DOCKLE_HOST: "unix:///var/run/docker.sock"
      TRIVY_OFFLINE_SCAN: ${{ inputs.container-scan-offline-mode }}
      
    outputs:
      imagetag: ${{ steps.output-image-tag.outputs.imagetag }}
      imagedigest: ${{ steps.output-image-digest.outputs.imagedigest }}

    steps:
      - name: Set imagetag as env variable
        run: echo "IMAGETAG=$(date +'%Y-%m-%d-%H%M')-${GITHUB_SHA::8}" >> "$GITHUB_ENV"

      - name: Set IMAGE-NAME env variable
        run: |
          echo "IMAGE-NAME=${{ secrets.REGISTRY_URL }}/${{ inputs.image-name || env.REPOSITORY-NAME }}" >> "$GITHUB_ENV"
      - uses: actions/checkout@v4

      - name: Build image
        run: docker build -t ${{env.IMAGE-NAME}}:${{env.IMAGETAG}} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@d710430a6722f083d3b36b8339ff66b32f22ee55 # pin@v0.19.0
        with:
          image-ref: ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}
          exit-code: "1"
          severity: "CRITICAL,HIGH"

      - name: "Login Azure docker container registery"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: "Push image"
        run: docker push ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}

      - run: echo "IMAGE_DIGEST=$(docker inspect --format='{{.RepoDigests}}' ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}|cut -d '@' -f 2|cut -d ']' -f 1)" >> "$GITHUB_ENV"

      - id: output-image-tag
        run: echo "imagetag=${{env.IMAGETAG}}" >> "$GITHUB_OUTPUT"

      - id: output-image-digest
        run: echo "imagedigest=${{env.IMAGE_DIGEST}}" >> "$GITHUB_OUTPUT"

  check-for-cve-suppression-changes:
    needs: [build-publish-image]
    uses: felleslosninger/github-workflows/.github/workflows/ci-check-for-cve-suppression-changes.yml@main
    secrets: inherit

  notify-on-errors:
    runs-on: ubuntu-latest
    needs: [build-publish-image]
    if: always() && contains(needs.*.result, 'failure')
    strategy:
      matrix:
        slack-channel: ["${{ inputs.slack-channel-id }}", "C05G4B8R2GG"]
    steps:
      - name: Send Slack notification
        uses: felleslosninger/github-actions/send-slack-notification@v0.5.2
        with:
          slack-channel-id: ${{ matrix.slack-channel }}
          slack-bot-token: ${{ secrets.SLACK_CICD_NOTIFICATION_TOKEN }}
          failed: "true"