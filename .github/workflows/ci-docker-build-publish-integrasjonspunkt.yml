name: Build, scan and publish Docker image

on:
  workflow_call:
    inputs:

      java-version:
        description: Main version of java
        default: "21"
        required: false
        type: string

      registry-url:
        description: URL of the Docker container registry (e.g., ghcr.io)
        default: "ghcr.io/felleslosninger"
        required: false
        type: string    

      image-name:
        description: Name of Docker image
        required: false
        type: string

      image-signing:
        description: Flag to toggle image signing on/off - default off
        default: true
        required: false
        type: boolean

      container-scan-offline-mode:
        description: Container-scan is default download updated CVE definitions via Trivy, enable offline on download problems
        default: false
        type: boolean

      slack-channel-id:
        description: Team channel id
        default: ""
        required: false
        type: string

      application-path:
        default: "./integrasjonspunkt"
        required: false
        type: string

      add-git-package-token:
        description: Adds GIT_PACKAGE_TOKEN build argument for Docker
        required: false
        type: boolean

    outputs:
      image-version:
        description: "Docker image version"
        value: ${{ jobs.build-publish-image.outputs.image-tag }}

      image-digest:
        description: "Docker image SHA256 digest"
        value: ${{ jobs.build-publish-image.outputs.image-digest }}

jobs:
  build-publish-image:
    runs-on: ubuntu-latest

    env:
      REPOSITORY-NAME: ${{ github.event.repository.name }}
      DOCKLE_HOST: "unix:///var/run/docker.sock"
      TRIVY_OFFLINE_SCAN: ${{ inputs.container-scan-offline-mode }}

    outputs:
      image-tag: ${{ steps.set-image-tag.outputs.image-tag }}
      image-digest: ${{ steps.set-image-digest.outputs.image-digest }}

    permissions:
      id-token: write
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # pin@v5.0.0

      - name: Set up JDK ${{ inputs.java-version }}
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # pin@v5.0.0
        with:
          distribution: "liberica"
          java-version: ${{ inputs.java-version }}

      - name: Set image tag from pom.xml
        id: set-image-tag
        run: |
          # Extract version from pom.xml
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f ${{ inputs.application-path }}/pom.xml)
          
          if [ -n "$VERSION" ] && [ "$VERSION" != "null" ]; then
            # Use the version from pom.xml
            image_tag="${VERSION}"
            
            # Remove -SNAPSHOT if present for production builds
            if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" =~ ^refs/tags/ ]]; then
              image_tag=${image_tag/-SNAPSHOT/}
            fi
          else
            # Fallback to date-based tag if version not found
            image_tag=$(date +'%Y-%m-%d-%H%M')-${GITHUB_SHA::8}
          fi
          
          echo "image-tag=$image_tag" >> "$GITHUB_OUTPUT"
          echo "- Image tag: $image_tag" >> "$GITHUB_STEP_SUMMARY"

      - name: Set image name
        id: set-image-name
        run: |
          image_name=${{ inputs.registry-url }}/${{ inputs.image-name || github.event.repository.name }}
          echo "image-name=$image_name" >> "$GITHUB_OUTPUT"
          echo "- Image name: $image_name" >> "$GITHUB_STEP_SUMMARY"

      - name: Build image
        run: |
          docker build \
            --tag ${{ steps.set-image-name.outputs.image-name }}:${{ steps.set-image-tag.outputs.image-tag }} \
            --file ${{ inputs.application-path }}/docker/Dockerfile \
            --build-arg GIT_PACKAGE_TOKEN=${{ secrets.GH_PACKAGES_READ_PAT }} \
            --build-arg GIT_PACKAGE_USERNAME=${{ secrets.GH_PACKAGES_READ_USER }} \
            .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0 # pin@v0.29.0
        id: trivy-primary
        env:
          TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db:2,public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-java-db:1,public.ecr.aws/aquasecurity/trivy-java-db:1
        with:
          image-ref: ${{ steps.set-image-name.outputs.image-name }}:${{ steps.set-image-tag.outputs.image-tag }}
          exit-code: "1"
          severity: "CRITICAL,HIGH"

      - name: Create SBOM artifact name
        id: sbom-name
        run: |
          SBOM_NAME=$(echo ${{ steps.set-image-name.outputs.image-name }} | tr '/' '-')
          echo "sbom-artifact-id=$SBOM_NAME" >> "$GITHUB_OUTPUT"
          echo "- SBOM: $SBOM_NAME" >> "$GITHUB_STEP_SUMMARY"

      - name: Run Trivy SBOM generation
        uses: aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0 # pin@v0.29.0
        env:
          TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db:2,public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-java-db:1,public.ecr.aws/aquasecurity/trivy-java-db:1
        with:
          scan-type: image
          format: github
          image-ref: "${{ steps.set-image-name.outputs.image-name }}:${{ steps.set-image-tag.outputs.image-tag }}"
          output: "sbom-${{ steps.sbom-name.outputs.sbom-artifact-id }}-${{ steps.set-image-tag.outputs.image-tag }}.json"
          github-pat: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload trivy report as a Github artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # pin@v4.6.0
        with:
          name: "sbom-${{ steps.sbom-name.outputs.sbom-artifact-id }}-${{ steps.set-image-tag.outputs.image-tag }}"
          path: "${{ github.workspace }}/sbom-${{ steps.sbom-name.outputs.sbom-artifact-id }}-${{ steps.set-image-tag.outputs.image-tag }}.json"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # pin@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Push image"
        run: docker push ${{ steps.set-image-name.outputs.image-name }}:${{ steps.set-image-tag.outputs.image-tag }}

      - name: Set image digest
        id: set-image-digest
        run: |
          image_digest=$(docker inspect \
            --format='{{.RepoDigests}}' ${{ steps.set-image-name.outputs.image-name }}:${{ steps.set-image-tag.outputs.image-tag }} \
            | cut -d '@' -f 2 \
            | cut -d ']' -f 1)
          echo "image-digest=$image_digest" >> "$GITHUB_OUTPUT"
          echo "- Image digest: $image_digest" >> "$GITHUB_STEP_SUMMARY"

      - name: Install Cosign
        if: ${{ inputs.image-signing == true }}
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # pin@v3.7.0

      - name: Generate Provenance Metadata
        if: ${{ inputs.image-signing == true }}
        run: |
          # Generate provenance data according to spec https://slsa.dev/spec/v1.0/provenance
          cat <<EOF > ./provenance.json
          {
            "_type": "https://slsa.dev/provenance/v1",
            "subject": [
              {
                "name": "${{ steps.set-image-name.outputs.image-name }}",
                "digest": {
                  "sha256": "${DIGEST}"
                }
              }
            ],
            "buildDefinition": {
              "buildType": "https://github.com/github-actions/build",
              "externalParameters": {
                "image": "${{ steps.set-image-name.outputs.image-name }}:${{ steps.set-image-tag.outputs.image-tag }}",
                "commit": "${{ github.sha }}",
                "author": "${{ github.actor }}",
                "job": "${{ github.job }}",
                "repositoryOwnerId": "${{ github.repository_owner_id }}"
              }
            },
            "runDetails": {
              "builder": {
                "id": "${{ github.workflow_ref }}"
              },
              "metadata": {
                "invocationId": "${{ github.run_id }}",
                "startedOn": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
              }
            },
            "materials": [
              {
                "uri": "git+https://github.com/${{ github.repository }}.git",
                "digest": {
                  "sha1": "${{ github.sha }}"
                }
              }
            ]
          }
          EOF

      - name: Sign the image
        if: ${{ inputs.image-signing == true }}
        run: |
          cosign sign --yes "${{ steps.set-image-name.outputs.image-name }}@${DIGEST}"
          cosign attest --yes --predicate ./provenance.json --type slsaprovenance1 "${{ steps.set-image-name.outputs.image-name }}@${DIGEST}"
        env:
          DIGEST: ${{ steps.set-image-digest.outputs.image-digest }}


  notify-on-errors:
    runs-on: ubuntu-latest
    needs: [build-publish-image]
    if: always() && contains(needs.*.result, 'failure')
    strategy:
      matrix:
        slack-channel: ["${{ inputs.slack-channel-id }}", "C05G4B8R2GG"]
    steps:
      - name: Send Slack notification
        uses: felleslosninger/github-actions/send-slack-notification@e4ba7c675762d5e9d3eeb48d6b75042e3dd325d3 # pin@v0.7.5
        with:
          slack-channel-id: ${{ matrix.slack-channel }}
          slack-bot-token: ${{ secrets.SLACK_CICD_NOTIFICATION_TOKEN }}
          failed: "true"
