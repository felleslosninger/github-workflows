name: Build and scan Docker image

on:
  workflow_call:
    inputs:

      java-version:
        description: Main version of java
        default: "21"
        required: false
        type: string

      registry-url:
        description: URL of the Docker container registry (e.g., ghcr.io)
        default: "ghcr.io/felleslosninger"
        required: false
        type: string    

      image-name:
        description: Name of Docker image
        required: false
        type: string

      image-signing:
        description: Flag to toggle image signing on/off - default off
        default: true
        required: false
        type: boolean

      container-scan-offline-mode:
        description: Container-scan is default download updated CVE definitions via Trivy, enable offline on download problems
        default: false
        type: boolean

      slack-channel-id:
        description: Team channel id
        default: ""
        required: false
        type: string

      application-path:
        default: "./integrasjonspunkt"
        required: false
        type: string

      add-git-package-token:
        description: Adds GIT_PACKAGE_TOKEN build argument for Docker
        required: false
        type: boolean

    outputs:
      image-version:
        description: "Docker image version"
        value: ${{ jobs.build-publish-image.outputs.image-tag }}

      image-digest:
        description: "Docker image SHA256 digest"
        value: ${{ jobs.build-publish-image.outputs.image-digest }}

jobs:
  build-publish-image:
    runs-on: ubuntu-latest

    env:
      REPOSITORY-NAME: ${{ github.event.repository.name }}
      DOCKLE_HOST: "unix:///var/run/docker.sock"
      TRIVY_OFFLINE_SCAN: ${{ inputs.container-scan-offline-mode }}

    outputs:
      image-tag: ${{ steps.set-image-tag.outputs.image-tag }}
      image-digest: ${{ steps.set-image-digest.outputs.image-digest }}

    permissions:
      id-token: write
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4.2.2

      - name: Set up JDK ${{ inputs.java-version }}
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # pin@v4.7.0
        with:
          distribution: "liberica"
          java-version: ${{ inputs.java-version }}

      - name: Set image tag from pom.xml
        id: set-image-tag
        run: |
          # Extract version from pom.xml
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f ${{ inputs.application-path }}/pom.xml)
          
          if [ -n "$VERSION" ] && [ "$VERSION" != "null" ]; then
            # Use the version from pom.xml
            image_tag="${VERSION}"
            
            # Remove -SNAPSHOT if present for production builds
            if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" =~ ^refs/tags/ ]]; then
              image_tag=${image_tag/-SNAPSHOT/}
            fi
          else
            # Fallback to date-based tag if version not found
            image_tag=$(date +'%Y-%m-%d-%H%M')-${GITHUB_SHA::8}
          fi
          
          echo "image-tag=$image_tag" >> "$GITHUB_OUTPUT"
          echo "- Image tag: $image_tag" >> "$GITHUB_STEP_SUMMARY"

      - name: Set image name
        id: set-image-name
        run: |
          image_name=${{ inputs.registry-url }}/${{ inputs.image-name || github.event.repository.name }}
          echo "image-name=$image_name" >> "$GITHUB_OUTPUT"
          echo "- Image name: $image_name" >> "$GITHUB_STEP_SUMMARY"

      - name: Build image
        run: |
          if [ "${{ inputs.add-git-package-token }}" = "true" ]; then
            docker build --tag ${{ steps.set-image-name.outputs.image-name }}:${{ steps.set-image-tag.outputs.image-tag }} --file ${{ inputs.application-path }}/docker/Dockerfile --build-arg GIT_PACKAGE_TOKEN=${{ secrets.GITHUB_TOKEN }} .
          else
            docker build --tag ${{ steps.set-image-name.outputs.image-name }}:${{ steps.set-image-tag.outputs.image-tag }} --file ${{ inputs.application-path }}/docker/Dockerfile .
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@18f2510ee396bbf400402947b394f2dd8c87dbb0 # pin@v0.29.0
        id: trivy-primary
        env:
          TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db:2,public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-java-db:1,public.ecr.aws/aquasecurity/trivy-java-db:1
        with:
          image-ref: ${{ steps.set-image-name.outputs.image-name }}:${{ steps.set-image-tag.outputs.image-tag }}
          exit-code: "1"
          severity: "CRITICAL,HIGH"

  notify-on-errors:
    runs-on: ubuntu-latest
    needs: [build-publish-image]
    if: always() && contains(needs.*.result, 'failure')
    strategy:
      matrix:
        slack-channel: ["${{ inputs.slack-channel-id }}", "C05G4B8R2GG"]
    steps:
      - name: Send Slack notification
        uses: felleslosninger/github-actions/send-slack-notification@bb702913dc7fc7ba16f6a2ce32624ba9eaf54262 # pin@v0.7.4
        with:
          slack-channel-id: ${{ matrix.slack-channel }}
          slack-bot-token: ${{ secrets.SLACK_CICD_NOTIFICATION_TOKEN }}
          failed: "true"
