name: Build and publish Docker image

on:
  workflow_call:
    inputs:
      image-name:
        description: Name of Docker image
        required: false
        type: string

      image-pack:
        description: Docker image pack of builder-jammy-tiny, builder-jammy-base or builder-jammy-full
        default: builder-jammy-tiny
        required: false
        type: string

      java-version:
        description: Main version of java
        default: "11"
        required: false
        type: string

      container-scan-offline-mode:
        description: Container-scan is default download updated CVE definitions via Trivy, enable offline on download problems
        default: false
        type: boolean

      slack-channel-id:
        description: Team channel id
        default: ""
        required: false
        type: string

      application-path:
        default: "./"
        required: false
        type: string

      cache-path:
        default: "**/pom.xml"
        required: false
        type: string

    outputs:
      image-version:
        description: "Docker image version"
        value: ${{ jobs.build-publish-image.outputs.imagetag }}
      image-digest:
        description: "Docker image SHA256 digest"
        value: ${{ jobs.build-publish-image.outputs.imagedigest }}

jobs:
  build-publish-image:
    runs-on: ubuntu-latest

    env:
      REPOSITORY-NAME: ${{ github.event.repository.name }}
      DOCKLE_HOST: "unix:///var/run/docker.sock"
      TRIVY_OFFLINE_SCAN: ${{ inputs.container-scan-offline-mode }}

    outputs:
      imagetag: ${{ steps.set-image-tag.outputs.image-tag }}
      imagedigest: ${{ steps.output-image-digest.outputs.imagedigest }}

    steps:
      - name: Set image tag
        id: set-image-tag
        run: echo "image-tag=$(date +'%Y-%m-%d-%H%M')-${GITHUB_SHA::8}" >> "$GITHUB_OUTPUT"

      - name: Set IMAGE-NAME env variable
        run: |
          echo "IMAGE-NAME=${{ secrets.REGISTRY_URL }}/${{ inputs.image-name || env.REPOSITORY-NAME }}" >> "$GITHUB_ENV"

      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin@v4.1.1

      - name: Run yamllint
        uses: ibiqlik/action-yamllint@81e214fd484713882ce4237cb7cd264d550856cf # pin@v3.1.0
        with:
          file_or_dir: src/main/resources/application*.y*ml
          config_data: |
            extends: default
            rules:
              empty-lines: disable
              line-length:
                max: 150
                level: warning

      - name: Set up JDK ${{ inputs.java-version }}
        uses: actions/setup-java@9704b39bf258b59bc04b50fa2dd55e9ed76b47a8 # pin@v4.1.0
        with:
          distribution: "liberica"
          java-version: ${{ inputs.java-version }}

      - name: Cache Maven packages
        uses: actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319 # pin@v4.0.1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.cache-path }}') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Maven environment setup
        uses: s4u/maven-settings-action@7802f6aec16c9098b4798ad1f1d8ac75198194bd # pin@v3.0.0
        with:
          servers: |
            [{
                "id": "github-oidc-sdk",
                "username": "${{ secrets.GH_PACKAGES_READ_USER }}",
                "password": "${{ secrets.GH_PACKAGES_READ_PAT }}"
            },
            {
              "id": "github",
              "username": "${{ secrets.GH_PACKAGES_READ_USER }}",
              "password": "${{ secrets.GH_PACKAGES_READ_PAT }}"
            }]

      - name: Maven update version used in application.yaml
        run: mvn versions:set -B -DnewVersion="$IMAGETAG"

      - name: Build image with Maven/Spring Boot
        run: mvn -B spring-boot:build-image --file pom.xml -Dspring-boot.build-image.imageName=${{env.IMAGE-NAME}}:${{ steps.set-image-tag.outputs.image-tag }} -Dspring-boot.build-image.builder=paketobuildpacks/${{ inputs.image-pack }} -Dspring-boot.build-image.createdDate=now

      - name: Set trivyignore env if file exists
        id: set-trivyignore-path
        run: |
          if [ -f "${{ inputs.application-path }}.trivyignore" ]; then
            echo "trivyignore-path=${{ inputs.application-path }}.trivyignore" >> "$GITHUB_OUTPUT"
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@d43c1f16c00cfd3978dde6c07f4bbcf9eb6993ca # pin@v0.16.1
        with:
          image-ref: ${{env.IMAGE-NAME}}:${{ steps.set-image-tag.outputs.image-tag }}
          exit-code: "1"
          severity: "CRITICAL,HIGH"
          trivyignores: ${{ steps.set-trivyignore-path.outputs.trivyignore-path }}

      - name: Create SBOM artifact-name
        id: sbom-name
        run: |
          SBOM_NAME=$(echo ${{env.IMAGE-NAME}} | tr '/' '-')
          echo "SBOM_ARTIFACT_ID=$SBOM_NAME" >> "$GITHUB_OUTPUT"

      - name: Create SBOM
        uses: anchore/sbom-action@9fece9e20048ca9590af301449208b2b8861333b # pin@v0.15.9
        with:
          image: ${{env.IMAGE-NAME}}:${{ steps.set-image-tag.outputs.image-tag }}
          artifact-name: sbom-${{steps.sbom-name.outputs.SBOM_ARTIFACT_ID}}-${{ steps.set-image-tag.outputs.image-tag }}.spdx

      - name: Login Azure docker container registery
        uses: azure/docker-login@83efeb77770c98b620c73055fbb59b2847e17dc0 # pin@v1.0.1
        with:
          login-server: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push image
        run: docker push ${{env.IMAGE-NAME}}:${{ steps.set-image-tag.outputs.image-tag }}

      - name: Set image digest
        run: echo "IMAGE_DIGEST=$(docker inspect --format='{{.RepoDigests}}' ${{env.IMAGE-NAME}}:${{ steps.set-image-tag.outputs.image-tag }}|cut -d '@' -f 2|cut -d ']' -f 1)" >> "$GITHUB_ENV"

      - name: Output image digest
        id: output-image-digest
        run: echo "imagedigest=${{env.IMAGE_DIGEST}}" >> "$GITHUB_OUTPUT"

  check-for-cve-suppression-changes:
    needs: [build-publish-image]
    uses: ./.github/workflows/ci-check-for-cve-suppression-changes.yml
    secrets: inherit

  notify-on-errors:
    runs-on: ubuntu-latest
    needs: [build-publish-image]
    if: always() && contains(needs.*.result, 'failure')
    strategy:
      matrix:
        slack-channel: ["${{ inputs.slack-channel-id }}", "C05G4B8R2GG"]
    steps:
      - name: Send Slack notification
        uses: felleslosninger/github-actions/send-slack-notification@v0.5.2
        with:
          slack-channel-id: ${{ matrix.slack-channel }}
          slack-bot-token: ${{ secrets.SLACK_CICD_NOTIFICATION_TOKEN }}
          failed: "true"
