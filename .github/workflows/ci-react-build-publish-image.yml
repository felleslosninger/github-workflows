name: Build/publish Docker image for React app

on:
  workflow_call:
    inputs:
      image-name:
        description: Name of Docker image
        required: false
        type: string
      slack-channel-id:
        description: Team channel id
        default: ""
        required: false
        type: string
      multi-module-project-path:
        description: Set to path of the module-to-build, only use if multi module project
        default: ""
        required: false
        type: string
      module-to-build:
        description: The module name in the multi module project to build, only set if using multi module project
        default: ""
        required: false
        type: string
      container-scan-offline-mode:
        description: Container-scan is default download updated CVE definitions via Trivy, enable offline on download problems
        default: false
        type: boolean
    outputs:
      image-version:
        description: "Docker image version"
        value: ${{ jobs.build-publish-image.outputs.imagetag }}
      image-digest:
        description: "Docker image SHA256 digest"
        value: ${{ jobs.build-publish-image.outputs.imagedigest }}

jobs:
  build-publish-image:
    runs-on: ubuntu-latest
    env:
      REPOSITORY-NAME: ${{ github.event.repository.name }}
      DOCKLE_HOST: "unix:///var/run/docker.sock"
      #TRIVY_TIMEOUT: "15m"
      TRIVY_OFFLINE_SCAN: ${{ inputs.container-scan-offline-mode }}
    outputs:
      imagetag: ${{ steps.output-image-tag.outputs.imagetag }}
      imagedigest: ${{ steps.output-image-digest.outputs.imagedigest }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set imagetag as env variable
        run: echo "IMAGETAG=$(date +'%Y-%m-%d-%H%M')-${GITHUB_SHA::8}" >> "$GITHUB_ENV"
      - name: Set IMAGE-NAME env variable
        run: |
           echo "IMAGE-NAME=${{ secrets.REGISTRY_URL }}/${{ inputs.image-name || env.REPOSITORY-NAME }}" >> "$GITHUB_ENV"

      - name: Install Pack CLI
        run: |
          PACK_VERSION=0.32.1
          curl -sSL "https://github.com/buildpacks/pack/releases/download/v${PACK_VERSION}/pack-v${PACK_VERSION}-linux.tgz" | sudo tar -C /usr/local/bin/ --no-same-owner -xzv pack

      - name: Build Docker image with Paketo
        run: |
          cd ${{ inputs.multi-module-project-path }}
          pack build ${{ env.IMAGE-NAME }}:${{ env.IMAGETAG }} --buildpack paketo-buildpacks/nodejs --builder paketobuildpacks/builder-jammy-base

      - name: Tag Docker image
        id: tag_image
        run: |
          echo "tag=${{ inputs.image-name }}:${{ github.sha }}" >> "$GITHUB_ENV"
          echo "digest=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ inputs.image-name }}:${{ github.sha }})" >> "$GITHUB_ENV"

      - name: "Login Azure docker container registry"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: "Push image"
        run: docker push ${{ env.IMAGE-NAME }}:${{ env.IMAGETAG }}

      - run: echo "IMAGE_DIGEST=$(docker inspect --format='{{.RepoDigests}}' ${{ env.IMAGE-NAME }}:${{ env.IMAGETAG }}|cut -d '@' -f 2|cut -d ']' -f 1)" >> "$GITHUB_ENV"

      - id: output-image-tag
        run: echo "imagetag=${{ env.IMAGETAG }}" >> "$GITHUB_OUTPUT"

      - id: output-image-digest
        run: echo "imagedigest=${{ env.IMAGE_DIGEST }}" >> "$GITHUB_OUTPUT"

  notify-on-errors:
    needs: [build-publish-image]
    if: ${{ always() && contains(needs.build-publish-image.result, 'failure') }}
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification on failure
        uses: ./.github/workflows/misc-send-notification-on-workflow-errors.yml
        with:
          slack-channel-id: ${{ inputs.slack-channel-id }}
          secrets: inherit
