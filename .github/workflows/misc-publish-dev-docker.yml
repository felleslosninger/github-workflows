name: dev.docker build and release on Github

on:
  workflow_call:
    inputs:
      docker-file:
        description: Location and name of Dockerfile
        required: false
        type: string
        default: docker/dev.Dockerfile

jobs:
  docker-build-publish:
    runs-on: ubuntu-latest
    env:
      REPOSITORY-NAME: ${{ github.event.repository.name }}
      ORG-NAME: felleslosninger
      CONTAINER-REGISTERY: ghcr.io
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{env.CONTAINER-REGISTERY}}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            GIT_PACKAGE_USERNAME=${{ secrets.MAVEN_USER }}
            GIT_PACKAGE_TOKEN=${{ secrets.MAVEN_PASSWORD }}
          file: ${{ inputs.docker-file }}
          labels: dev
          tags: ${{env.CONTAINER-REGISTERY}}/${{env.ORG-NAME}}/${{env.REPOSITORY-NAME}}:latest
#      - name: Get today's date at midnight
#        run: echo "TODAY=$(date +'%Y-%m-%d')" >> "$GITHUB_ENV"
#      - name: Delete versions of dev.docker images older then today, keep latest
#        uses: actions/github-script@v6
#        with:
#          github-token: ${{ secrets.DELETE_PACKAGES_TOKEN }}
#          script: |
#            const response = await github.request("GET /orgs/${{ env.ORG-NAME }}/packages/container/${{ env.REPOSITORY-NAME }}/versions");
#            console.log("today  " + new Date(Date.parse("${{ env.TODAY }}"+"T00:00:00.000Z")) );
#            for(version of response.data) {
#                console.log("del "+ (new Date(version.updated_at) < new Date(Date.parse("${{ env.TODAY }}"+"T00:00:00.000Z")) ));
#                console.log("Found: "+ version.id)
#                if (version.metadata.container.tags.length == 0 && new Date(version.updated_at) < new Date(Date.parse("${{ env.TODAY }}"+"T00:00:00.000Z")) ) {
#                    console.log("delete " + version.id + ", version.updated_at: " + version.updated_at)
#                    const deleteResponse = await github.request("DELETE /orgs/${{ env.ORG-NAME }}/packages/container/${{ env.REPOSITORY-NAME }}/versions/" + version.id);
#                    console.log("status " + deleteResponse.status)
#                }
#            }
#      - name: Delete old versions of dev.docker images, keep latest
#        uses: camargo/delete-untagged-action@v1
#        with:
#          repository: ${{env.ORG-NAME}}/${{env.REPOSITORY-NAME}}
#          github-token: ${{ secrets.DELETE_PACKAGES_TOKEN }}
      - name: Delete old versions of dev.docker images, keep latest
        uses: snok/container-retention-policy@v2
        with:
          image-names: ${{env.REPOSITORY-NAME}}
          cut-off: 20 min ago UTC+1
          timestamp-to-use: updated_at
          untagged-only: true
          account-type: org
          org-name: ${{env.ORG-NAME}}
          skip-tags: latest
          token: ${{ secrets.DELETE_PACKAGES_TOKEN }}

