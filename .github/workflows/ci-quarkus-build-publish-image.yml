name: Build/publish Docker image

on:
  workflow_call:
    inputs:
      image-name:
        description: Name of Docker image
        required: false
        type: string

      image-pack:
        description: Docker image pack of builder-jammy-tiny, builder-jammy-base or builder-jammy-full
        default: builder-jammy-tiny
        required: false
        type: string

      image-signing:
        description: Flag to toggle image signing on/off - default off
        default: true
        required: false
        type: boolean

      java-version:
        description: Main version of java
        default: "21"
        required: false
        type: string

      slack-channel-id:
        description: Team channel id
        default: ""
        required: false
        type: string

      native:
        description: Build native image
        required: false
        type: boolean
        default: false

      container-registry:
        description: Azure Container Registry name
        default: "creiddev.azurecr.io"
        required: false
        type: string

      sp-container-registry-client-id:
        required: false
        default: "AZURE_CLIENT_ID"
        type: string
        description: Service Principal used for container registry in inputs

    outputs:
      image-version:
        description: "Docker image version"
        value: ${{ jobs.build-publish-image.outputs.imagetag }}

      image-digest:
        description: "Docker image SHA256 digest"
        value: ${{ jobs.build-publish-image.outputs.imagedigest }}

jobs:
  inputs-to-summary:
    runs-on: ubuntu-latest
    steps:
      - name: "Write inputs to summary"
        uses: felleslosninger/github-actions/json-to-summary@bb702913dc7fc7ba16f6a2ce32624ba9eaf54262 # pin@v0.7.4
        with:
          json: ${{ toJson(inputs) }}
          title: "Inputs"

  build-publish-image:
    runs-on: ubuntu-latest

    env:
      REPOSITORY-NAME: ${{ github.event.repository.name }}
      DOCKLE_HOST: "unix:///var/run/docker.sock"

    outputs:
      imagetag: ${{ steps.output-image-tag.outputs.imagetag }}
      imagedigest: ${{ steps.output-image-digest.outputs.imagedigest }}

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Set imagetag as env variable
        run: echo "IMAGETAG=$(date +'%Y-%m-%d-%H%M')-${GITHUB_SHA::8}" >> "$GITHUB_ENV"

      - name: Set IMAGE-NAME env variable
        run: |
          echo "IMAGE-NAME=${{ inputs.container-registry }}/${{ inputs.image-name || env.REPOSITORY-NAME }}" >> "$GITHUB_ENV"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4.2.2

      - name: Cache Maven packages
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # pin@v4.2.0
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - uses: s4u/maven-settings-action@64e42c454dbd42ef6370ac8539685755aedd205b # pin@v3.1.0
        with:
          servers: |
            [{
              "id": "github",
              "username": "${{ secrets.MAVEN_USER }}",
              "password": "${{ secrets.MAVEN_PASSWORD }}"
            }]

      - name: Maven update version used in application.yaml
        run: mvn versions:set -B -DnewVersion="$IMAGETAG"

      - name: Install pack
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          echo "Installing pack ${PACK_VERSION}"
          mkdir -p /usr/local/bin
          curl \
            --location \
            --show-error \
            --silent \
            "https://github.com/buildpacks/pack/releases/download/v${PACK_VERSION}/pack-v${PACK_VERSION}-linux.tgz" \
          | sudo tar -C /usr/local/bin --no-same-owner -xzv pack
        env:
          PACK_VERSION: 0.32.1

      - name: Build native image with Maven/Quarkus
        if: inputs.native == true
        run: |
          pack build ${{env.IMAGE-NAME}}:${{env.IMAGETAG}} \
            --path . \
            --buildpack docker://paketobuildpacks/quarkus \
            --buildpack docker://paketobuildpacks/java-native-image \
            --builder paketobuildpacks/${{ inputs.image-pack }} \
            --volume "${HOME}/.m2:/home/cnb/.m2:rw" \
            --env BP_JVM_VERSION="${{ inputs.java-version }}" \
            --env BP_MAVEN_POM_FILE="./pom.xml" \
            --env BP_NATIVE_IMAGE="true" \
            --env LANG="C.UTF-8" \
            --creation-time now

      - name: Build image with Maven/Quarkus
        if: inputs.native == false
        run: |
          pack build ${{env.IMAGE-NAME}}:${{env.IMAGETAG}} \
            --path . \
            --buildpack docker://paketobuildpacks/quarkus \
            --buildpack docker://paketobuildpacks/java \
            --builder paketobuildpacks/${{ inputs.image-pack }} \
            --volume "${HOME}/.m2:/home/cnb/.m2:rw" \
            --env BP_JVM_VERSION="${{ inputs.java-version }}" \
            --env BP_MAVEN_POM_FILE="./pom.xml" \
            --creation-time now

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4 # pin@v0.32.0
        id: trivy-primary
        env:
          TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db:2,public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-java-db:1,public.ecr.aws/aquasecurity/trivy-java-db:1
        with:
          image-ref: ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}
          exit-code: "1"
          severity: "CRITICAL,HIGH"

      - name: Create SBOM artifact-name
        id: sbom-name
        run: |
          SBOM_NAME=$(echo ${{env.IMAGE-NAME}} | tr '/' '-')
          echo "SBOM_ARTIFACT_ID=$SBOM_NAME" >> "$GITHUB_OUTPUT"

      - uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # pin@v0.18.0
        with:
          image: ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}
          artifact-name: sbom-${{steps.sbom-name.outputs.SBOM_ARTIFACT_ID}}-${{env.IMAGETAG}}.spdx

      - name: Login to ACR
        uses: azure/login@v2
        with:
          client-id: ${{ secrets[inputs.sp-container-registry-client-id] }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        run: az acr login --name "$ACR_NAME"
        env:
          ACR_NAME: ${{ inputs.container-registry }}

      - name: Push image
        run: docker push ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}

      - run: echo "IMAGE_DIGEST=$(docker inspect --format='{{.RepoDigests}}' ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}|cut -d '@' -f 2|cut -d ']' -f 1)" >> "$GITHUB_ENV"

      - id: output-image-tag
        run: echo "imagetag=${{env.IMAGETAG}}" >> "$GITHUB_OUTPUT"

      - id: output-image-digest
        run: echo "imagedigest=${{env.IMAGE_DIGEST}}" >> "$GITHUB_OUTPUT"

      - name: Install Cosign
        if: ${{ inputs.image-signing == true }}
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # pin@v3.7.0

      - name: Generate Provenance Metadata
        if: ${{ inputs.image-signing == true }}
        run: |
          # Generate provenance data according to spec https://slsa.dev/spec/v1.0/provenance
          cat <<EOF > ./provenance.json
          {
            "_type": "https://slsa.dev/provenance/v1",
            "subject": [
              {
                "name": "${{ env.IMAGE-NAME }}",
                "digest": {
                  "sha256": "${DIGEST}"
                }
              }
            ],
            "buildDefinition": {
              "buildType": "https://github.com/github-actions/build",
              "externalParameters": {
                "image": "${{ env.IMAGE-NAME }}:${{ env.IMAGETAG }}",
                "commit": "${{ github.sha }}",
                "author": "${{ github.actor }}",
                "job": "${{ github.job }}",
                "repositoryOwnerId": "${{ github.repository_owner_id }}"
              }
            },
            "runDetails": {
              "builder": {
                "id": "${{ github.workflow_ref }}"
              },
              "metadata": {
                "invocationId": "${{ github.run_id }}",
                "startedOn": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
              }
            },
            "materials": [
              {
                "uri": "git+https://github.com/${{ github.repository }}.git",
                "digest": {
                  "sha1": "${{ github.sha }}"
                }
              }
            ]
          }
          EOF

      - name: Sign the image
        if: ${{ inputs.image-signing == true }}
        run: |
          cosign sign --yes "${{ env.IMAGE-NAME }}@${DIGEST}"
          cosign attest --yes --predicate ./provenance.json --type slsaprovenance1 "${{ env.IMAGE-NAME }}@${DIGEST}"
        env:
          DIGEST: ${{ env.IMAGE_DIGEST }}

  notify-on-errors:
    runs-on: ubuntu-latest
    needs: [build-publish-image]
    if: always() && contains(needs.*.result, 'failure')
    strategy:
      matrix:
        slack-channel: ["${{ inputs.slack-channel-id }}", "C05G4B8R2GG"]
    steps:
      - name: Send Slack notification
        uses: felleslosninger/github-actions/send-slack-notification@bb702913dc7fc7ba16f6a2ce32624ba9eaf54262 # pin@v0.7.4
        with:
          slack-channel-id: ${{ matrix.slack-channel }}
          slack-bot-token: ${{ secrets.SLACK_CICD_NOTIFICATION_TOKEN }}
          failed: "true"
