name: Build/publish Docker image

on:
  workflow_call:
    inputs:
      image-name:
        description: Name of Docker image
        required: false
        type: string

      image-pack:
        description: Docker image pack of builder-jammy-tiny, builder-jammy-base or builder-jammy-full
        default: builder-jammy-tiny
        required: false
        type: string

      image-signing:
        description: Flag to toggle image signing on/off - default off
        default: false
        required: false
        type: boolean

      java-version:
        description: Main version of java
        default: "21"
        required: false
        type: string

      slack-channel-id:
        description: Team channel id
        default: ""
        required: false
        type: string

      native:
        description: Build native image
        required: false
        type: boolean
        default: false

    outputs:
      image-version:
        description: "Docker image version"
        value: ${{ jobs.build-publish-image.outputs.imagetag }}

      image-digest:
        description: "Docker image SHA256 digest"
        value: ${{ jobs.build-publish-image.outputs.imagedigest }}

jobs:
  build-publish-image:
    runs-on: ubuntu-latest

    env:
      REPOSITORY-NAME: ${{ github.event.repository.name }}
      DOCKLE_HOST: "unix:///var/run/docker.sock"

    outputs:
      imagetag: ${{ steps.output-image-tag.outputs.imagetag }}
      imagedigest: ${{ steps.output-image-digest.outputs.imagedigest }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Write inputs to summary"
        uses: felleslosninger/github-actions/json-to-summary@bb702913dc7fc7ba16f6a2ce32624ba9eaf54262 # pin@v0.7.4
        with:
          json: ${{ toJson(github) }}
          title: "GitHub Context"

      - name: Set imagetag as env variable
        run: echo "IMAGETAG=$(date +'%Y-%m-%d-%H%M')-${GITHUB_SHA::8}" >> "$GITHUB_ENV"

      - name: Set IMAGE-NAME env variable
        run: |
          echo "IMAGE-NAME=${{ secrets.REGISTRY_URL }}/${{ inputs.image-name || env.REPOSITORY-NAME }}" >> "$GITHUB_ENV"

      - name: Checkout
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 #ping@v4.2.1

      - name: yaml-lint
        uses: ibiqlik/action-yamllint@2576378a8e339169678f9939646ee3ee325e845c # pin@v3.1.1
        with:
          file_or_dir: src/main/resources/application*.y*ml
          config_data: |
            extends: default
            rules:
              empty-lines: disable
              line-length:
                max: 150
                level: warning

      - name: Cache Maven packages
        uses: actions/cache@3624ceb22c1c5a301c8db4169662070a689d9ea8 # pin@v4.1.1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - uses: s4u/maven-settings-action@7802f6aec16c9098b4798ad1f1d8ac75198194bd # pin@v3.0.0
        with:
          servers: |
            [{
              "id": "github",
              "username": "${{ secrets.MAVEN_USER }}",
              "password": "${{ secrets.MAVEN_PASSWORD }}"
            }]

      - name: Maven update version used in application.yaml
        run: mvn versions:set -B -DnewVersion="$IMAGETAG"

      - name: Install pack
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          echo "Installing pack ${PACK_VERSION}"
          mkdir -p /usr/local/bin
          curl \
            --location \
            --show-error \
            --silent \
            "https://github.com/buildpacks/pack/releases/download/v${PACK_VERSION}/pack-v${PACK_VERSION}-linux.tgz" \
          | sudo tar -C /usr/local/bin --no-same-owner -xzv pack
        env:
          PACK_VERSION: 0.32.1

      - name: Build native image with Maven/Quarkus
        if: inputs.native == true
        run: |
          pack build ${{env.IMAGE-NAME}}:${{env.IMAGETAG}} \
            --path . \
            --buildpack docker://paketobuildpacks/quarkus \
            --buildpack docker://paketobuildpacks/java-native-image \
            --builder paketobuildpacks/${{ inputs.image-pack }} \
            --volume "${HOME}/.m2:/home/cnb/.m2:rw" \
            --env BP_JVM_VERSION="${{ inputs.java-version }}" \
            --env BP_MAVEN_POM_FILE="./pom.xml" \
            --env BP_NATIVE_IMAGE="true" \
            --creation-time now

      - name: Build image with Maven/Quarkus
        if: inputs.native == false
        run: |
          pack build ${{env.IMAGE-NAME}}:${{env.IMAGETAG}} \
            --path . \
            --buildpack docker://paketobuildpacks/quarkus \
            --buildpack docker://paketobuildpacks/java \
            --builder paketobuildpacks/${{ inputs.image-pack }} \
            --volume "${HOME}/.m2:/home/cnb/.m2:rw" \
            --env BP_JVM_VERSION="${{ inputs.java-version }}" \
            --env BP_MAVEN_POM_FILE="./pom.xml" \
            --creation-time now

      - name: Run Trivy vulnerability scanner (primary)
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # pin@v0.24.0
        id: trivy-primary
        continue-on-error: true
        with:
          image-ref: ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}
          exit-code: "1"
          severity: "CRITICAL,HIGH"
      - name: Run Trivy vulnerability scanner (fallback)
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # pin@v0.24.0
        if: steps.trivy-primary.outcome == 'failure'
        id: trivy-fallback
        env:
          TRIVY_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-db"
          TRIVY_JAVA_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-java-db:1"
        with:
          image-ref: ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}
          exit-code: "1"
          severity: "CRITICAL,HIGH"

      - name: Create SBOM artifact-name
        id: sbom-name
        run: |
          SBOM_NAME=$(echo ${{env.IMAGE-NAME}} | tr '/' '-')
          echo "SBOM_ARTIFACT_ID=$SBOM_NAME" >> "$GITHUB_OUTPUT"

      - uses: anchore/sbom-action@f5e124a5e5e1d497a692818ae907d3c45829d033 #pin@v0.17.3
        with:
          image: ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}
          artifact-name: sbom-${{steps.sbom-name.outputs.SBOM_ARTIFACT_ID}}-${{env.IMAGETAG}}.spdx

      - name: Login to ACR
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # pin@v3.3.0
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push image
        run: docker push ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}

      - run: echo "IMAGE_DIGEST=$(docker inspect --format='{{.RepoDigests}}' ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}|cut -d '@' -f 2|cut -d ']' -f 1)" >> "$GITHUB_ENV"

      - id: output-image-tag
        run: echo "imagetag=${{env.IMAGETAG}}" >> "$GITHUB_OUTPUT"

      - id: output-image-digest
        run: echo "imagedigest=${{env.IMAGE_DIGEST}}" >> "$GITHUB_OUTPUT"

      - name: Install Cosign
        if: ${{ inputs.image-signing == true }}
        uses: sigstore/cosign-installer@4959ce089c160fddf62f7b42464195ba1a56d382 # pin@v3.6.0

      - name: Generate Provenance Metadata
        if: ${{ inputs.image-signing == true }}
        run: |
          # Generate provenance data according to spec https://slsa.dev/spec/v1.0/provenance
          cat <<EOF > ./provenance.json
          {
            "_type": "https://slsa.dev/provenance/v1",
            "subject": [
              {
                "name": "${{ env.IMAGE-NAME }}",
                "digest": {
                  "sha256": "${DIGEST}"
                }
              }
            ],
            "buildDefinition": {
              "buildType": "https://github.com/github-actions/build",
              "externalParameters": {
                "image": "${{ env.IMAGE-NAME }}:${{ env.IMAGETAG }}",
                "commit": "${{ github.sha }}",
                "author": "${{ github.actor }}",
                "job": "${{ github.job }}",
                "repositoryOwnerId": "${{ github.repository_owner_id }}"
              }
            },
            "runDetails": {
              "builder": {
                "id": "${{ github.workflow_ref }}"
              },
              "metadata": {
                "invocationId": "${{ github.run_id }}",
                "startedOn": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
              }
            },
            "materials": [
              {
                "uri": "git+https://github.com/${{ github.repository }}.git",
                "digest": {
                  "sha1": "${{ github.sha }}"
                }
              }
            ]
          }
          EOF

      - name: Sign the image
        if: ${{ inputs.image-signing == true }}
        run: |
          cosign sign --yes "${{ env.IMAGE-NAME }}@${DIGEST}"
          cosign attest --yes --predicate ./provenance.json --type slsaprovenance1 "${{ env.IMAGE-NAME }}@${DIGEST}"
        env:
          DIGEST: ${{ env.IMAGE_DIGEST }}



  notify-on-errors:
    runs-on: ubuntu-latest
    needs: [build-publish-image]
    if: always() && contains(needs.*.result, 'failure')
    strategy:
      matrix:
        slack-channel: ["${{ inputs.slack-channel-id }}", "C05G4B8R2GG"]
    steps:
      - name: Send Slack notification
        uses: felleslosninger/github-actions/send-slack-notification@bb702913dc7fc7ba16f6a2ce32624ba9eaf54262 #pin@v0.7.4
        with:
          slack-channel-id: ${{ matrix.slack-channel }}
          slack-bot-token: ${{ secrets.SLACK_CICD_NOTIFICATION_TOKEN }}
          failed: "true"
