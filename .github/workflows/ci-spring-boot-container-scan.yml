name: Container scan

on:
  workflow_call:
    inputs:
      image-name:
        description: Name of Docker image
        required: false
        type: string
      image-pack:
        description: Docker image pack of builder-jammy-tiny, builder-jammy-base or builder-jammy-full
        default: builder-jammy-tiny
        required: false
        type: string
      registry-url:
        description: Image/Container Registery URL
        default: "my-local-registery"
        required: false
        type: string
      java-version:
        description: Main version of java
        default: "11"
        required: false
        type: string
      container-scan-offline-mode:
        description: Container-scan is default download updated CVE definitions via Trivy, enable offline on download problems
        default: false
        type: boolean
      setup-npm-auth:
        description: Configure private NPM registry authentication
        default: false
        required: false
        type: boolean
      application-path:
        default: "./"
        required: false
        type: string
      cache-path:
        default: "**/pom.xml"
        required: false
        type: string

jobs:
  build-and-scan-image:
    runs-on: ubuntu-latest
    env:
      REPOSITORY-NAME: ${{ github.event.repository.name }}
      DOCKLE_HOST: "unix:///var/run/docker.sock"
      TRIVY_OFFLINE_SCAN: ${{ inputs.container-scan-offline-mode }}
    steps:
      - name: Set image tag
        id: set-image-tag
        run: echo "image-tag=$(date +'%Y-%m-%d-%H%M')-${GITHUB_SHA::8}" >> "$GITHUB_OUTPUT"

      - name: Set image name
        id: set-image-name
        run: |
          echo "image-name=${{ inputs.registry-url }}/${{ inputs.image-name || env.REPOSITORY-NAME }}" >> "$GITHUB_OUTPUT"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4.2.2

      - name: Set up JDK ${{ inputs.java-version }}
        uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # pin@v4.7.0
        with:
          distribution: "liberica"
          java-version: ${{ inputs.java-version }}
          cache: maven
          cache-dependency-path: ${{ inputs.cache-path }}

      - name: Configure private NPM registry authentication
        if: ${{ inputs.setup-npm-auth == true }}
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # pin@v4.2.0
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@felleslosninger'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Maven environment setup
        uses: s4u/maven-settings-action@64e42c454dbd42ef6370ac8539685755aedd205b # pin@v3.1.0
        with:
          servers: |
            [{
                "id": "github-oidc-sdk",
                "username": "${{ secrets.MAVEN_USER }}",
                "password": "${{ secrets.MAVEN_PASSWORD }}"
            },
            {
              "id": "github",
              "username": "${{ secrets.MAVEN_USER }}",
              "password": "${{ secrets.MAVEN_PASSWORD }}"
            }]

      - name: Build image with Maven (skips tests)
        run: mvn -DskipTests -B spring-boot:build-image --file ${{ inputs.application-path }}pom.xml -Dspring-boot.build-image.imageName=${{ steps.set-image-name.outputs.image-name }}:${{ steps.set-image-tag.outputs.image-tag }} -Dspring-boot.build-image.builder=paketobuildpacks/${{ inputs.image-pack }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@76071ef0d7ec797419534a183b498b4d6366cf37 # pin@v0.31.0
        id: trivy-primary
        env:
          TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db:2,public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-java-db:1,public.ecr.aws/aquasecurity/trivy-java-db:1
        with:
          image-ref: "${{ steps.set-image-name.outputs.image-name }}:${{ steps.set-image-tag.outputs.image-tag }}"
          exit-code: "1"
          severity: "CRITICAL,HIGH"

